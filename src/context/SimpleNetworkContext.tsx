import React, { createContext, useContext, useEffect, useRef } from 'react';
import { useSimpleGameSync } from '../hooks/useSimpleGameSync';
import { useGame } from './GameContext';
import { GameMove } from '../types/networkTypes';
import { createInitialGameState } from '../data/initialGameState';

interface SimpleNetworkContextType {
  isConnected: boolean;
}

const SimpleNetworkContext = createContext<SimpleNetworkContextType | undefined>(undefined);

interface SimpleNetworkProviderProps {
  children: React.ReactNode;
}

export const SimpleNetworkProvider: React.FC<SimpleNetworkProviderProps> = ({ children }) => {
  const { sendMove, setOnMove, setOnGameStart, setOnInitialState, startRoomMonitoring, isConnected } = useSimpleGameSync();
  const { state, dispatch } = useGame();
  const lastProcessedMoveId = useRef<string>('');
  const syncCallbackRef = useRef<((action: any) => void) | null>(null);
  const isInitialized = useRef(false);

  // „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç≤„Éº„É†ÈñãÂßãÊôÇ„ÅÆÁõ£Ë¶ñÈñãÂßã
  useEffect(() => {
    if (state.isNetworkGame && state.roomId && isConnected) {
      if (isInitialized.current) {
        console.log('‚úÖ Êó¢„Å´Áõ£Ë¶ñÈñãÂßãÊ∏à„Åø:', state.roomId);
        return;
      }

      console.log('üîó „É´„Éº„É†Áõ£Ë¶ñÈñãÂßã:', {
        roomId: state.roomId,
        isHost: state.isHost
      });

      startRoomMonitoring(state.roomId, state.isHost);
      isInitialized.current = true;
    }
  }, [state.isNetworkGame, state.roomId, state.isHost, isConnected, startRoomMonitoring]);

  // üÜï ÂàùÊúüÁõ§Èù¢„Éá„Éº„ÇøÂèó‰ø°ÊôÇ„ÅÆÂá¶ÁêÜÔºà„Ç≤„Çπ„ÉàÁî®Ôºâ
  useEffect(() => {
    if (state.isNetworkGame && !state.isHost) {
      setOnInitialState((initialState) => {
        console.log('üì• ÂàùÊúüÁõ§Èù¢„Éá„Éº„ÇøÂèó‰ø°Ôºà„Ç≤„Çπ„ÉàÔºâ:', initialState);
        
        // üÜï Â∫ßÊ®ôÊÉÖÂ†±„ÇíÂê´„ÇÄÂÆåÂÖ®„Å™ÂàùÊúüÁä∂ÊÖã„ÇíÂÜçÊßãÁØâ
        const fullGameState = createInitialGameState(
          {
            master: initialState.playerDeck.master as any,
            monsters: initialState.playerDeck.monsters as any[]
          },
          {
            master: initialState.enemyDeck.master as any,
            monsters: initialState.enemyDeck.monsters as any[]
          }
        );

        // „Ç≤„Éº„É†Áä∂ÊÖã„ÇíÊõ¥Êñ∞ÔºàÊôÇÈñìÂà∂ÈôêË®≠ÂÆö„ÇÇÂê´„ÇÄÔºâ
        dispatch({
          type: 'START_NETWORK_GAME',
          roomId: state.roomId!,
          isHost: false,
          hasTimeLimit: initialState.hasTimeLimit,
          timeLimitSeconds: initialState.timeLimitSeconds,
          playerDeck: {
            master: initialState.playerDeck.master as any,
            monsters: initialState.playerDeck.monsters as any[]
          },
          enemyDeck: {
            master: initialState.enemyDeck.master as any,
            monsters: initialState.enemyDeck.monsters as any[]
          }
        });

        // üîß „Ç≠„É£„É©„ÇØ„Çø„ÉºÈÖçÁΩÆ„ÇíÊ≠£Á¢∫„Å´ÂèçÊò†
        dispatch({
          type: 'UPDATE_PREVIEW',
          playerDeck: {
            master: initialState.playerDeck.master as any,
            monsters: initialState.playerDeck.monsters as any[]
          },
          enemyDeck: {
            master: initialState.enemyDeck.master as any,
            monsters: initialState.enemyDeck.monsters as any[]
          }
        });
      });
    }
  }, [state.isNetworkGame, state.isHost, state.roomId, setOnInitialState, dispatch]);

  // „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÂêåÊúü„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
  useEffect(() => {
    if (state.isNetworkGame && state.roomId) {
      const syncCallback = async (action: any) => {
        if (!state.roomId || !isConnected) {
          console.error('‚ùå „É´„Éº„É†ID„Åæ„Åü„ÅØÊé•Á∂ö„ÅåÁ¢∫Á´ã„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
          return;
        }
        
        try {
          // üîß „Ç≠„É£„É©„ÇØ„Çø„ÉºID„Åß„ÅØ„Å™„ÅèÂ∫ßÊ®ô„ÅßÊ§úÁ¥¢
          let character = null;
          
          if (action.characterId) {
            character = state.characters.find(c => c.id === action.characterId);
          }
          
          if (!character) {
            console.warn('‚ö†Ô∏è „Ç≠„É£„É©„ÇØ„Çø„ÉºID„ÅßË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÄÅÂ∫ßÊ®ô„ÅßÊ§úÁ¥¢:', action);
            // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: ÁèæÂú®„ÅÆ„ÉÅ„Éº„É†„ÅÆ„Ç≠„É£„É©„ÇØ„Çø„Éº„Åã„ÇâÊé®Ê∏¨
            const teamCharacters = state.characters.filter(c => c.team === action.team);
            if (teamCharacters.length > 0) {
              character = teamCharacters[0]; // ÊúÄÂàù„ÅÆ„Ç≠„É£„É©„ÇØ„Çø„Éº„Çí‰ΩøÁî®
              console.log('üîß „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: ÊúÄÂàù„ÅÆ„Ç≠„É£„É©„ÇØ„Çø„Éº„Çí‰ΩøÁî®:', character.name);
            }
          }
          
          if (!character) {
            console.error('‚ùå „Ç≠„É£„É©„ÇØ„Çø„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì:', action);
            return;
          }

          const move = {
            turn: action.turn,
            action: action.type,
            from: character.position,
            ...(action.position && { to: action.position })
          };

          console.log('üì§ Ê£ãË≠úÈÄÅ‰ø°:', move);
          await sendMove(state.roomId, move, state.isHost);
        } catch (error) {
          console.error('‚ùå Ê£ãË≠úÈÄÅ‰ø°Â§±Êïó:', error);
        }
      };
      
      syncCallbackRef.current = syncCallback;
      dispatch({ type: 'SET_NETWORK_SYNC_CALLBACK', callback: syncCallback });
    } else if (!state.isNetworkGame) {
      syncCallbackRef.current = null;
      dispatch({ type: 'SET_NETWORK_SYNC_CALLBACK', callback: null });
    }
  }, [state.isNetworkGame, state.roomId, sendMove, dispatch, state.characters, state.isHost, isConnected]);

  // Êâã„ÅÆÂèó‰ø°„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
  useEffect(() => {
    if (state.isNetworkGame && state.roomId) {
      const moveCallback = (move: GameMove) => {
        if (move.id === lastProcessedMoveId.current) {
          return;
        }

        console.log('üì• Áõ∏Êâã„ÅÆÊâã„ÇíÂèó‰ø°:', {
          action: move.action,
          from: move.from,
          to: move.to
        });

        // üîß Èùí„ÉÅ„Éº„É†=host„ÄÅËµ§„ÉÅ„Éº„É†=guest „ÅÆÁµ±‰∏Ä
        const networkAction = {
          turn: move.turn,
          team: state.isHost ? 'enemy' : 'player', // host=Èùí„ÉÅ„Éº„É†(player)„ÄÅguest=Ëµ§„ÉÅ„Éº„É†(enemy)
          type: move.action,
          from: move.from,
          to: move.to
        };

        dispatch({ type: 'SYNC_NETWORK_ACTION', action: networkAction });
        lastProcessedMoveId.current = move.id;
      };

      setOnMove(moveCallback);
    } else {
      setOnMove(() => {});
    }
  }, [state.isNetworkGame, state.isHost, setOnMove, dispatch, state.roomId]);

  // „Ç≤„Éº„É†ÁµÇ‰∫ÜÊôÇ„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
  useEffect(() => {
    if (!state.isNetworkGame && isInitialized.current) {
      console.log('üßπ „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç≤„Éº„É†ÁµÇ‰∫Ü - „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó');
      isInitialized.current = false;
    }
  }, [state.isNetworkGame]);

  return (
    <SimpleNetworkContext.Provider 
      value={{ 
        isConnected
      }}
    >
      {children}
    </SimpleNetworkContext.Provider>
  );
};

export const useSimpleNetwork = (): SimpleNetworkContextType => {
  const context = useContext(SimpleNetworkContext);
  if (context === undefined) {
    throw new Error('useSimpleNetwork must be used within a SimpleNetworkProvider');
  }
  return context;
};