import React, { createContext, useContext, useEffect, useRef } from 'react';
import { useSimpleGameSync } from '../hooks/useSimpleGameSync';
import { useGame } from './GameContext';
import { GameMove } from '../types/networkTypes';

interface SimpleNetworkContextType {
  isConnected: boolean;
}

const SimpleNetworkContext = createContext<SimpleNetworkContextType | undefined>(undefined);

interface SimpleNetworkProviderProps {
  children: React.ReactNode;
}

export const SimpleNetworkProvider: React.FC<SimpleNetworkProviderProps> = ({ children }) => {
  const { sendMove, uploadInitialState, setOnMove, setOnGameStart, setOnInitialState, startRoomMonitoring, isConnected } = useSimpleGameSync();
  const { state, dispatch } = useGame();
  const lastProcessedMoveId = useRef<string>('');
  const syncCallbackRef = useRef<((action: any) => void) | null>(null);
  const isInitialized = useRef(false);
  const initialStateUploaded = useRef(false);

  // „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç≤„Éº„É†ÈñãÂßãÊôÇ„ÅÆÁõ£Ë¶ñÈñãÂßã
  useEffect(() => {
    if (state.isNetworkGame && state.roomId && isConnected) {
      if (isInitialized.current) {
        console.log('‚úÖ Êó¢„Å´Áõ£Ë¶ñÈñãÂßãÊ∏à„Åø:', state.roomId);
        return;
      }

      console.log('üîó „É´„Éº„É†Áõ£Ë¶ñÈñãÂßã:', {
        roomId: state.roomId,
        isHost: state.isHost
      });

      startRoomMonitoring(state.roomId, state.isHost);
      isInitialized.current = true;
    }
  }, [state.isNetworkGame, state.roomId, state.isHost, isConnected, startRoomMonitoring]);

  // üÜï ÊúÄÈÅ©Âåñ„Åï„Çå„ÅüÂàùÊúüÁõ§Èù¢„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÔºà„Éõ„Çπ„Éà„ÅÆ„Åø„ÄÅ„Ç≤„Éº„É†ÈñãÂßãÊôÇ„Å´1Âõû„Å†„ÅëÔºâ
  useEffect(() => {
    if (state.isNetworkGame && state.isHost && state.gamePhase === 'action' && 
        state.roomId && !initialStateUploaded.current && isConnected) {
      
      console.log('üì§ ÂàùÊúüÁõ§Èù¢„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÈñãÂßã');
      
      // üÜï ÊúÄÈÅ©Âåñ„Åï„Çå„ÅüÂàùÊúüÁä∂ÊÖã„Éá„Éº„ÇøÔºàÂøÖË¶ÅÊúÄÂ∞èÈôê„ÅÆÊÉÖÂ†±„ÅÆ„ÅøÔºâ
      const initialState = {
        // „Ç≠„É£„É©„ÇØ„Çø„ÉºÊÉÖÂ†±Ôºà„Ç´„Éº„ÉâID„Å®„ÉÅ„Éº„É†„ÅÆ„ÅøÔºâ
        playerDeck: {
          master: state.savedDecks?.player?.master || 'blue',
          monsters: state.savedDecks?.player?.monsters || ['bear', 'wolf', 'golem']
        },
        enemyDeck: {
          master: state.savedDecks?.enemy?.master || 'red',
          monsters: state.savedDecks?.enemy?.monsters || ['bear', 'wolf', 'golem']
        },
        // „Ç≤„Éº„É†Ë®≠ÂÆö
        startingTeam: state.currentTeam,
        hasTimeLimit: state.hasTimeLimit,
        timeLimitSeconds: state.timeLimitSeconds,
        // „É°„Çø„Éá„Éº„Çø
        uploadedAt: Date.now(),
        uploadedBy: 'host'
      };

      uploadInitialState(state.roomId, initialState)
        .then(() => {
          console.log('‚úÖ ÂàùÊúüÁõ§Èù¢„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü');
          initialStateUploaded.current = true;
        })
        .catch((error) => {
          console.error('‚ùå ÂàùÊúüÁõ§Èù¢„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂ§±Êïó:', error);
        });
    }
  }, [state.isNetworkGame, state.isHost, state.gamePhase, state.roomId, 
      state.savedDecks, state.currentTeam, state.hasTimeLimit, state.timeLimitSeconds, 
      uploadInitialState, isConnected]);

  // „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÂêåÊúü„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
  useEffect(() => {
    if (state.isNetworkGame && state.roomId) {
      const syncCallback = async (action: any) => {
        if (!state.roomId || !isConnected) {
          console.error('‚ùå „É´„Éº„É†ID„Åæ„Åü„ÅØÊé•Á∂ö„ÅåÁ¢∫Á´ã„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
          return;
        }
        
        try {
          const character = state.characters.find(c => c.id === action.characterId);
          if (!character) {
            console.error('‚ùå „Ç≠„É£„É©„ÇØ„Çø„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì:', action.characterId);
            return;
          }

          const move = {
            turn: action.turn,
            action: action.type,
            from: character.position,
            ...(action.position && { to: action.position })
          };

          console.log('üì§ Ê£ãË≠úÈÄÅ‰ø°:', move);
          await sendMove(state.roomId, move, state.isHost);
        } catch (error) {
          console.error('‚ùå Ê£ãË≠úÈÄÅ‰ø°Â§±Êïó:', error);
        }
      };
      
      syncCallbackRef.current = syncCallback;
      dispatch({ type: 'SET_NETWORK_SYNC_CALLBACK', callback: syncCallback });
    } else if (!state.isNetworkGame) {
      syncCallbackRef.current = null;
      dispatch({ type: 'SET_NETWORK_SYNC_CALLBACK', callback: null });
    }
  }, [state.isNetworkGame, state.roomId, sendMove, dispatch, state.characters, state.isHost, isConnected]);

  // Êâã„ÅÆÂèó‰ø°„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
  useEffect(() => {
    if (state.isNetworkGame && state.roomId) {
      const moveCallback = (move: GameMove) => {
        if (move.id === lastProcessedMoveId.current) {
          return;
        }

        console.log('üì• Áõ∏Êâã„ÅÆÊâã„ÇíÂèó‰ø°:', {
          action: move.action,
          from: move.from,
          to: move.to
        });

        // üîß Èùí„ÉÅ„Éº„É†=host„ÄÅËµ§„ÉÅ„Éº„É†=guest „ÅÆÁµ±‰∏Ä
        const networkAction = {
          turn: move.turn,
          team: state.isHost ? 'enemy' : 'player', // host=Èùí„ÉÅ„Éº„É†(player)„ÄÅguest=Ëµ§„ÉÅ„Éº„É†(enemy)
          type: move.action,
          from: move.from,
          to: move.to
        };

        dispatch({ type: 'SYNC_NETWORK_ACTION', action: networkAction });
        lastProcessedMoveId.current = move.id;
      };

      setOnMove(moveCallback);
    } else {
      setOnMove(() => {});
    }
  }, [state.isNetworkGame, state.isHost, setOnMove, dispatch, state.roomId]);

  // „Ç≤„Éº„É†ÁµÇ‰∫ÜÊôÇ„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
  useEffect(() => {
    if (!state.isNetworkGame && isInitialized.current) {
      console.log('üßπ „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç≤„Éº„É†ÁµÇ‰∫Ü - „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó');
      isInitialized.current = false;
      initialStateUploaded.current = false;
    }
  }, [state.isNetworkGame]);

  return (
    <SimpleNetworkContext.Provider 
      value={{ 
        isConnected
      }}
    >
      {children}
    </SimpleNetworkContext.Provider>
  );
};

export const useSimpleNetwork = (): SimpleNetworkContextType => {
  const context = useContext(SimpleNetworkContext);
  if (context === undefined) {
    throw new Error('useSimpleNetwork must be used within a SimpleNetworkProvider');
  }
  return context;
};